吞吐量、响应时间、内存消耗、启动时间、可用性以及易管理性

假设
  这个一步步的优化步骤，是基于应用都有以下执行过程的假设：
  1、初始化阶段――初始化重要的数据结构和其他需要使用的依赖库。
  2、稳定阶段――应用消耗大部分的时间执行其核心函数。
  3、可选的总结阶段――比如需要制作报告。
  稳定阶段是我们需要主要关注的地方。

测试基础设施：
   为了做出关于内存占用、延迟、吞吐量以及启动时间等优化有根据的决定，并且为了证实选择的JVM运行环境是正确的，我们需要从试验中收集数据（需要注意的是这个试验要能够反映生产环境的实际情况）。因此，有一个能够代表生产环境的性能测试环境就相当重要了。包括硬件和软件都需要代表生产环境。简单的说，测试环境和生产环境越接近，做出来的优化决定越靠谱。
下面，我们详细介绍需求的定义。

性能需求详细描述： 
   从前面我们知道，系统层面的需求决定应用的某一方面的特性，比如它的吞吐量、响应时间、消耗的内存、它的可用性以及易管理性等等。另外，功能需求决定了应用计算的内容或者产生的输出。 
接下来的我们描述一下我们会涉及到层面的需求。

可用性
   可用性是衡量应用处于可用状态的指标。可用性需求表明了当应用的某些组件损坏或者遇到错误的时候，整个应用或应用的其他部分处于可用状态。
   在Java应用领域，高可用性可以通过把系统的分隔成各个组件，然后运行在不同JVM上面或者在多个JVM上面运行相同应用实例来实现。一个需要平衡的点是，当提升系统的可用性，系统的维护成本会升高。引入更多的JVM或者机器，那么就有更多的JVM需要管理，这个就是造成了成本的升高和复杂性的提升。
   我们常见的可用性需求例子：“当系统某一部分出现错误的时候，不要让整个应用程序崩溃”。

易管理性
   易管理性是衡量系统的运行和监控的成本以及配置应用的成本。易管理性的需求表明了这个应用被管理的容易程度。通常来讲，用更少的JVM去运行应用，那么需要付出更小的成本去维护和监控应用。而且更少的JVM应用配置也更加简单，但是这个是建立牺牲应用的可用性上面的。
一个简单的易管理性需求例子：“由于有限的资源，应用只能部署到尽量少的JVM上面。”

吞吐量
   吞吐量是衡量系统在单位时间里面完成的工作数量。吞吐量需求通常忽略延迟或者响应时间。通常情况下，提升吞吐量需要以系统响应变慢和更多内存消耗作为代价。
   一个吞吐量的例子：“这个应用需要每秒完成2500个事务。”

延迟和响应时间
   延迟或者响应时间是衡量应用从接收到一个任务到完成这个任务消耗的时间。一个延迟或者响应时间的需求需要忽略吞吐量。通常来讲，提升应用的响 应时间需要以更低吞吐量或提高应用的内容消耗。
一个延迟或者响应时间的例子:"这个应用会在60毫秒内，执行完成交易操作。"

内存占用
   内存占用是衡量应用消耗的内存，这个内存占用是指应用在运行在某一个吞吐量、延迟以及可用性和易管理性指标下的内存消耗，内存占用是通常描述为应用运行的时候Java堆的大小或者总共需要消耗内存。通常情况下，通过增加Java堆的大小以增加应用内存占用可以提升吞吐量或者减少延迟，或者两者兼具。当应用可用的内存减少的时候，吞吐量和延迟通常会受到损失。在给定内存的情况下，应用占用的内存可以限制应用的实例数（这个会影响可用性）。
   一个例子说明内存占用的需求是：“这个应用会单独运行在一个8G的系统上面或者多出3个应用实例运行在一个24G的应用系统上面。”

启动时间
   启动时间是衡量应用初始化的时间（如：eclipse的启动时间）。在Java应用中，大家可能对JVM优化应用的热点需要的时间感兴趣。Java应用初始化需要消耗的时间依赖于很多因素包括单不仅限于需要装载的类的数量、需要初始化的对象数量、并且这些对象怎么初始化，以及HotSpot虚拟器运行环境的选择（client or server，eclipse使用的HotSpot Client，Jboss会使用HotSpot Server,两者在初始化时间上和运行过程中对热点的优化不一样）。

   抛开需要加载的类的数量、需要初始化的对象的数量以及对象如何初始化，使用HotSpot client运行环境会获得更快的启动速度，由于他没有做足够的优化，这些优化可以提供更高吞吐量和更低的延迟。相反，HotSpot Server运行环境需要更长的启动时间，由于它需要更好多的获得应用关于Java代码的信息，并且对生成的机器码进行了很高优化。

   启动时间需求的例子如：“这个应用会再15秒内完成初始化。”

对系统需求进行优先级排序

   优化操作的第一步就是对系统层面的需求进行优先级排序。做这个需要把主要的应用负责人叫到一起来商定优先级的排序，并且最终达成一致。这个讨论需要在应用的架构和设计阶段完成，由于这个讨论可以提供非常明确的结论，比如说：什么系统需求是最重要的。

   对于应用的负责人来说，系统需求的优先级决定了优化操作。最重要的系统需求促使形成一些基本决定。比如说：可用性比易管理性重要，那么JVM部署模型就会采用部署多个JVM。相反如果易管理性比可用性重要，那么就更加倾向于选择单个JVM的部署模型。
如何选择JVM部署模型和JVM Runtime会在接下来的一节中讲到。