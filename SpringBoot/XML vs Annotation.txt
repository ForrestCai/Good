xml 之所以这么流行，是因为它的很多优点是其它技术的配置所无法替代的。　　１、xml 作为可扩展标记语言最大的优势在于开发者能够为软件量身定制适用的标记，使代码更加通俗易懂。　　２、利用 xml 配置能使软件更具扩展性。例如 Spring 将 class 间的依赖配置在 xml 中，最大限度地提升应用的可扩展性。　　３、具有成熟的验证机制确保程序正确性。利用 Schema 或 DTD 可以对 xml 的正确性进行验证，避免了非法的配置导致应用程序出错。　　４、修改配置而无需变动现有程序。　　虽然有如此多的好处，但毕竟没有什么万能的东西，xml 也有自身的缺点。　　１、需要解析工具或类库的支持。　　２、解析 xml 势必会影响应用程序性能，占用系统资源。　　３、配置文件过多导致管理变得困难。　　４、编译期无法对其配置项的正确性进行验证，或要查错只能在运行期。　　５、IDE 无法验证配置项的正确性无能为力。　　６、查错变得困难。往往配置的一个手误导致莫名其妙的错误。　　７、开发人员不得不同时维护代码和配置文件，开发效率变得低下。　　８、配置项与代码间存在潜规则。改变了任何一方都有可能影响另外一方。