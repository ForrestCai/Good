abstract class和interface是C#语言中对于抽象类定义进行支持的两种机制，正是由于这两种机制的存在，才赋予了C#强大的面向对象能力。abstract class和interface之间在对于抽象类定义的支持方面具有很大的相似性，甚至可以相互替换，因此很多开发者在进行抽象类定义时对于abstract class和interface的选择显得比较随意。
其实，两者之间还是有很大的区别的，对于它们的选择甚至反映出对于问题领域本质的理解、对于设计意图的理解是否正确、合理。本文将对它们之间的区别进行一番剖析，试图给开发者提供一个在二者之间进行选择的依据。
下面我们主要从设计理念层面看看abstract class和interface的区别！
abstarct class在C#语言中体现了一种继承关系，要想使得继承关系合理，父类和派生类之间必须存在"is a"关系，即父类和派生类在概念本质上应该是相同的。对于interface 来说则不然，并不要求interface的实现者和interface定义在概念本质上是一致的，仅仅是实现了interface定义的契约而已。为了使论述便于理解，下面将通过一个简单的实例进行说明。 
考虑这样一个例子，假设在我们的问题领域中有一个关于Door的抽象概念，该Door具有执行两个动作open和close，此时我们可以通过abstract class或者interface来定义一个表示该抽象概念的类型，定义方式分别如下所示：


使用abstract class方式定义Door： 
abstract class Door { 
abstract void open(); 
abstract void close()； 
} 
使用interface方式定义Door： 
interface Door { 
void open(); 
void close(); 
}


其他具体的Door类型可以extends使用abstract class方式定义的Door或者implements使用interface方式定义的Door。看起来好像使用abstract class和interface没有大的区别。
如果现在要求Door还要具有报警的功能。我们该如何设计针对该例子的类结构呢（在本例中，主要是为了展示abstract class和interface反映在设计理念上的区别，其他方面无关的问题都做了简化或者忽略）下面将罗列出可能的解决方案，并从设计理念层面对这些不同的方案进行分析。
解决方案一：
简单的在Door的定义中增加一个alarm方法，如下：


abstract class Door { 
abstract void open(); 
abstract void close()； 
abstract void alarm(); 
} 

或者 
interface Door { 
void open(); 
void close(); 
void alarm(); 
}





class AlarmDoor extends Door { 
void open() { … } 
void close() { … } 
void alarm() { … } 
} 

或者 
class AlarmDoor implements Door ｛ 
void open() { … } 
void close() { … } 
void alarm() { … } 
｝


这种方法违反了面向对象设计中的一个核心原则ISP（Interface Segregation Priciple），在Door的定义中把Door概念本身固有的行为方法和另外一个概念"报警器"的行为方法混在了一起。这样引起的一个问题是那些仅仅依赖于Door这个概念的模块会因为"报警器"这个概念的改变（比如：修改alarm方法的参数）而改变，反之依然。 
解决方案二： 
既然open、close和alarm属于两个不同的概念，根据ISP原则应该把它们分别定义在代表这两个概念的抽象类中。定义方式有：这两个概念都使用abstract class方式定义；两个概念都使用interface方式定义；一个概念使用abstract class方式定义，另一个概念使用interface方式定义。 
显然，由于Java语言不支持多重继承，所以两个概念都使用abstract class方式定义是不可行的。后面两种方式都是可行的，但是对于它们的选择却反映出对于问题领域中的概念本质的理解、对于设计意图的反映是否正确、合理。我们一一来分析、说明。 
如果两个概念都使用interface方式来定义，那么就反映出两个问题： 
1、我们可能没有理解清楚问题领域，AlarmDoor在概念本质上到底是Door还是报警器？ 
2、如果我们对于问题领域的理解没有问题，比如：我们通过对于问题领域的分析发现AlarmDoor在概念本质上和Door是一致的，那么我们在实现时就没有能够正确的揭示我们的设计意图，因为在这两个概念的定义上（均使用interface方式定义）反映不出上述含义。 
如果我们对于问题领域的理解是：AlarmDoor在概念本质上是Door，同时它有具有报警的功能。我们该如何来设计、实现来明确的反映出我们的意思呢？前面已经说过，abstract class在C#语言中表示一种继承关系，而继承关系在本质上是"is a"关系。所以对于Door这个概念，我们应该使用abstarct class方式来定义。另外，AlarmDoor又具有报警功能，说明它又能够完成报警概念中定义的行为，所以报警概念可以通过interface方式定义。如下所示：


abstract class Door { 
abstract void open(); 
abstract void close()； 
} 
interface Alarm { 
void alarm(); 
} 
class AlarmDoor extends Door implements Alarm { 
void open() { … } 
void close() { … } 
    void alarm() { … } 
}


这种实现方式基本上能够明确的反映出我们对于问题领域的理解，正确的揭示我们的设计意图。其实abstract class表示的是"is a"关系，interface表示的是"like a"关系，大家在选择时可以作为一个依据，当然这是建立在对问题领域的理解上的，比如：如果我们认为AlarmDoor在概念本质上是报警器，同时又具有Door的功能，那么上述的定义方式就要反过来了。 
abstract class和interface是C#语言中的两种定义抽象类的方式，它们之间有很大的相似性。但是对于它们的选择却又往往反映出对于问题领域中的概念本质的理解、对于设计意图的反映是否正确、合理，因为它们表现了概念间的不同的关系（虽然都能够实现需求的功能）。这其实也是语言的一种的惯用法，希望读者朋友能够细细体会。
注：以下是java的

 

Abstract class

Interface

实例化

不能

不能

类

一种继承关系，一个类只能使用一次继承关系。可以通过继承多个接口实现多重继承

一个类可以实现多个interface

数据成员

可有自己的

静态的不能被修改即必须是static final，一般不在此定义

方法

可以私有的，非abstract方法，必须实现

不可有私有的，默认是public，abstract 类型

变量

可有私有的，默认是friendly 型，其值可以在子类中重新定义，也可以重新赋值

不可有私有的，默认是public static final 型，且必须给其初值，实现类中不能重新定义，不能改变其值。

设计理念

表示的是“is-a”关系

表示的是“like-a”关系

实现

需要继承，要用extends

要用implements


IDisposable